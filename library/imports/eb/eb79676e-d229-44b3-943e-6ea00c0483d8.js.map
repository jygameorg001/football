{"version":3,"sources":["assets/Script/common/EventManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,SAAgB,SAAS;IACrB;QAOI;QAAyB,CAAC;QAJ1B,sBAAW,0BAAQ;iBAAnB;gBACI,OAAO,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,CAAM,CAAC;YAClE,CAAC;;;WAAA;QAJc,wBAAS,GAAmB,IAAI,CAAC;QAOpD,qBAAC;KARD,AAQC,IAAA;IAED,OAAO,cAAc,CAAC;AAC1B,CAAC;AAZD,8BAYC;AAMD;IAAkC,gCAAyB;IAA3D;QAAA,qEAoJC;QAnJW,YAAM,GAA6B,IAAI,GAAG,EAAE,CAAC;;IAmJzD,CAAC;IAjJG;;;;;OAKG;IACH,yBAAE,GAAF,UAAG,KAAa,EAAE,QAAkB,EAAE,MAAgB;QAClD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAC9B;QAED,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAElC,KAAiB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;YAAlB,IAAI,IAAI,aAAA;YACT,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;gBACxB,OAAO;aACV;SACJ;QAED,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,0BAAG,GAAH,UAAI,KAAa,EAAE,QAAkB,EAAE,MAAgB;QACnD,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM;iBACpB,GAAG,CAAC,KAAK,CAAC;iBACV,SAAS,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,EAAnF,CAAmF,CAAC,CAAC;YAC3G,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAEtD,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC7B;SACJ;IACL,CAAC;IAED;;;;OAIG;IACH,2BAAI,GAAJ,UAAK,KAAa;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAC9B,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,EAAoB;oBAAlB,QAAQ,cAAA,EAAE,MAAM,YAAA;gBAC9C,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,eAAI,IAAI,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEG;;;;GAID;IACH,mCAAY,GAAZ,UAAa,KAAa;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACtC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAI;gBACpB,oCAAoC;gBACpC,OAAO;aACV;YACD,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC5B,IAAI,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAChC,OAAO,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,eAAI,IAAI,CAAC,CAAC;SACpE;IACL,CAAC;IAED;;;OAGG;IACH,4BAAK,GAAL,UAAM,KAAc;QAApB,iBAUC;QATG,IAAI,CAAC,KAAK,EAAE;YACR,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;gBAC5B,KAAiB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;oBAAlB,IAAI,IAAI,aAAA;oBACT,KAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC/C;YACL,CAAC,CAAC,CAAC;SACN;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC7B;IACL,CAAC;IAED;;;OAGG;IACH,oCAAa,GAAb,UAAc,MAAe;QAA7B,iBAQC;QAPG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;YAC5B,KAAiB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;gBAAlB,IAAI,IAAI,aAAA;gBACT,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;oBACxB,KAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC/C;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,gCAAS,GAAT;QAAA,iBAgBC;QAfG,IAAI,SAAS,GAAa,EAAE,CAAC;QAE7B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;YAC5B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,EAAE,EAAtB,CAAsB,CAAC,CAAC;YAElD,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjB,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aAChC;iBAAM;gBACH,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzB;QACL,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,OAAO,CAAC,UAAC,KAAK;YACpB,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,2BAAI,GAAJ;QACI,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI;YACrB,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC;gBACX,KAAK,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IAEP,CAAC;IAED;;;;OAIG;IACH,uCAAgB,GAAhB,UAAiB,KAAa;QAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IACL,mBAAC;AAAD,CApJA,AAoJC,CApJiC,SAAS,EAAgB,GAoJ1D;AApJY,oCAAY;AAsJZ,QAAA,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC","file":"","sourceRoot":"/","sourcesContent":["\nexport function Singleton<T>() {\n    class SingletonClass {\n        private static _instance: SingletonClass = null;\n\n        static get instance(): T {\n            return (this._instance || (this._instance = new this())) as T;\n        }\n\n        protected constructor() {}\n    }\n\n    return SingletonClass;\n}\nexport interface EventData {\n    event?: string;\n    listener: Function;\n    target?: any;\n}\nexport class EventManager extends Singleton<EventManager>() {\n    private events: Map<string, EventData[]> = new Map();\n\n    /**\n     * 监听事件\n     * @param event\n     * @param listener\n     * @param target\n     */\n    on(event: string, listener: Function, target?: unknown) {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n\n        let list = this.events.get(event);\n\n        for (let item of list) {\n            if (item.target === target) {\n                return;\n            }\n        }\n\n        list.push({ event, listener, target });\n    }\n\n    /**\n     * 注销事件\n     * @param event\n     * @param listener\n     * @param target\n     */\n    off(event: string, listener: Function, target?: unknown) {\n        if (this.events.has(event)) {\n            const index = this.events\n                .get(event)\n                .findIndex((v) => (!!listener ? v.listener === listener && v.target === target : v.target === target));\n            index > -1 && this.events.get(event).splice(index, 1);\n\n            if (this.events.get(event).length === 0) {\n                this.events.delete(event);\n            }\n        }\n    }\n\n    /**\n     * 派发事件\n     * @param event\n     * @param args\n     */\n    emit(event: string, ...args: any[]) {\n        if (this.events.has(event)) {\n            this.events.get(event).forEach(({ listener, target }) => {\n                target ? listener.apply(target, args) : listener(...args);\n            });\n        }\n    }\n\n        /**\n     * 派发事件\n     * @param event\n     * @param args\n     */\n    emitCallBack(event: string, ...args: any[]):any {\n        if (this.events.has(event)) {\n            let list = this.events.get(event);\n            if (list.length != 1)   {\n                // console.warn(\"监听接口超过一个，不能调用这个接口\")\n                return;\n            }\n            let target = list[0].target;\n            let listener = list[0].listener;\n            return target ? listener.apply(target, args) : listener(...args);\n        }\n    }\n\n    /**\n     * 清空事件map\n     * @param event\n     */\n    clear(event?: string) {\n        if (!event) {\n            this.events.forEach((list, event) => {\n                for (let item of list) {\n                    this.off(event, item.listener, item.target);\n                }\n            });\n        } else {\n            this.events.delete(event);\n        }\n    }\n\n    /**\n     * 删除target所有事件\n     * @param target\n     */\n    clearByTarget(target: unknown) {\n        this.events.forEach((list, event) => {\n            for (let item of list) {\n                if (item.target === target) {\n                    this.off(event, item.listener, item.target);\n                }\n            }\n        });\n    }\n\n    /**\n     * 清空所有匿名函数事件\n     */\n    clearAnon() {\n        let clearList: string[] = [];\n\n        this.events.forEach((list, event) => {\n            list = list.filter((v) => v.listener.name !== \"\");\n\n            if (list.length > 0) {\n                this.events.set(event, list);\n            } else {\n                clearList.push(event);\n            }\n        });\n\n        clearList.forEach((event) => {\n            this.events.delete(event);\n        });\n    }\n\n    /**\n     * 打印事件\n     */\n    dump() {\n        let count = 0;\n\n        this.events.forEach((list) => {\n            list.forEach((v) => {\n                count++;\n            });\n        });\n\n    }\n\n    /**\n     * 获取事件所有监听\n     * @param event\n     * @returns\n     */\n    getEventDataList(event: string) {\n        return this.events.get(event);\n    }\n}\n\nexport const EventMgr = EventManager.instance;\n"]}